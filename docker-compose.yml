services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092 # External access (if needed)
      - 29092:29092 # Internal Docker network access
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-net

  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9093:9093
      - 29093:29093
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29093,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:29093,EXTERNAL://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    volumes:
      - kafka2-data:/var/lib/kafka/data
    networks:
      - kafka-net

  kafka3:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9094:9094
      - 29094:29094
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29094,EXTERNAL://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:29094,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 2
    volumes:
      - kafka3-data:/var/lib/kafka/data
    networks:
      - kafka-net

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - 9000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092,kafka2:29093,kafka3:29094
    depends_on:
      - kafka
    networks:
      - kafka-net

  kafka-producer-demo:
    build:
      context: ./KafkaProducerDemo
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - logstash
    ports:
      - 5000:5000
    environment:
      ASPNETCORE_URLS: "http://+:5000"
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      OFFSET_START: 0
    networks:
      - kafka-net

  kafka-producer-demo-2:
    build:
      context: ./KafkaProducerDemo
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - logstash
    ports:
      - 5001:5001
    environment:
      ASPNETCORE_URLS: "http://+:5001"
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      OFFSET_START: 5000000
    networks:
      - kafka-net

  kafka-consumer-demo:
    build:
      context: ./KafkaConsumerDemo
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres2
      - mysql1
      - logstash
    ports:
      - 5002:5002
    environment:
      ASPNETCORE_URLS: "http://+:5002"
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: order_payment_topic
      KAFKA_GROUP_ID: consumer-group-1
      POSTGRES_CONNECTION_STRING: "Host=postgres2;Port=5432;Username=user2;Password=password2;Database=db2"
      MYSQL_CONNECTION_STRING: "Server=mysql1;Port=3306;Database=db1;User=user1;Password=password1;"
    networks:
      - kafka-net
  kafka-consumer-demo-rep-1:
    build:
      context: ./KafkaConsumerDemo
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres2
      - mysql1
      - logstash
    ports:
      - 5004:5004
    environment:
      ASPNETCORE_URLS: "http://+:5004"
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: order_payment_topic
      KAFKA_GROUP_ID: consumer-group-1
      POSTGRES_CONNECTION_STRING: "Host=postgres2;Port=5432;Username=user2;Password=password2;Database=db2"
      MYSQL_CONNECTION_STRING: "Server=mysql1;Port=3306;Database=db1;User=user1;Password=password1;"
    networks:
      - kafka-net

  kafka-consumer-demo-2:
    build:
      context: ./KafkaConsumerDemo
      dockerfile: Dockerfile
    depends_on:
      - kafka
      - postgres3
      - mysql2
      - logstash
    ports:
      - 5003:5003
    environment:
      ASPNETCORE_URLS: "http://+:5003"
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: order_payment_topic
      KAFKA_GROUP_ID: consumer-group-2
      POSTGRES_CONNECTION_STRING: "Host=postgres3;Port=5432;Username=user3;Password=password3;Database=db3"
      MYSQL_CONNECTION_STRING: "Server=mysql2;Port=3306;Database=db2;User=user2;Password=password2;"
    networks:
      - kafka-net

  postgres1:
    image: postgres:latest
    container_name: postgres1
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: user1
      POSTGRES_PASSWORD: password1
      POSTGRES_DB: db1
    volumes:
      - postgres1-data:/var/lib/postgresql/data
    networks:
      - kafka-net

  postgres2:
    image: postgres:latest
    container_name: postgres2
    ports:
      - 5433:5432
    environment:
      POSTGRES_USER: user2
      POSTGRES_PASSWORD: password2
      POSTGRES_DB: db2
    volumes:
      - postgres2-data:/var/lib/postgresql/data
    networks:
      - kafka-net

  postgres3:
    image: postgres:latest
    container_name: postgres3
    ports:
      - 5434:5432
    environment:
      POSTGRES_USER: user3
      POSTGRES_PASSWORD: password3
      POSTGRES_DB: db3
    volumes:
      - postgres3-data:/var/lib/postgresql/data
    networks:
      - kafka-net

  mysql1:
    image: mysql:latest
    container_name: mysql1
    ports:
      - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword1
      MYSQL_DATABASE: db1
      MYSQL_USER: user1
      MYSQL_PASSWORD: password1
    volumes:
      - mysql1-data:/var/lib/mysql
    networks:
      - kafka-net

  mysql2:
    image: mysql:latest
    container_name: mysql2
    ports:
      - 3307:3306
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword2
      MYSQL_DATABASE: db2
      MYSQL_USER: user2
      MYSQL_PASSWORD: password2
    volumes:
      - mysql2-data:/var/lib/mysql
    networks:
      - kafka-net

  kafka-next-data-demo:
    build:
      context: ./kafka-next-data-demo
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    depends_on:
      - kafka
    networks:
      - kafka-net

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.2
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - kafka-net

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.2
    container_name: logstash
    depends_on:
      - elasticsearch
    ports:
      - 5044:5044 # Logstash Beats input
      - 4999:4999 # Logstash TCP input
      - 9600:9600 # Logstash monitoring API
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    networks:
      - kafka-net

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.2
    container_name: kibana
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - kafka-net

networks:
  kafka-net:
    driver: bridge

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  kafka2-data:
  kafka3-data:
  postgres1-data:
  postgres2-data:
  postgres3-data:
  mysql1-data:
  mysql2-data:
  elasticsearch-data:
